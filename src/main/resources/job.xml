<?xml version="1.0" encoding="UTF-8"?>
<!-- * Copyright 2002-2013 the original author or authors. * * Licensed under 
	the Apache License, Version 2.0 (the "License"); * you may not use this file 
	except in compliance with the License. * You may obtain a copy of the License 
	at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by 
	applicable law or agreed to in writing, software * distributed under the 
	License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. * See the License for the specific 
	language governing permissions and * limitations under the License. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.SimpleJobRepository">
		<constructor-arg>
			<bean
				class="org.springframework.batch.core.repository.dao.MapJobInstanceDao" />
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.springframework.batch.core.repository.dao.MapJobExecutionDao" />
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.springframework.batch.core.repository.dao.MapStepExecutionDao" />
		</constructor-arg>
		<constructor-arg>  <!-- Extra constructor argument -->
			<bean
				class="org.springframework.batch.core.repository.dao.MapExecutionContextDao" />
		</constructor-arg>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceOrg" />
	</bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
		<constructor-arg ref="dataSourceOrg" />
	</bean>

	<bean id="dataSourceOrg"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:mem:testdb" />
		<property name="username" value="bobo" />
		<property name="password" value="bobo" />
	</bean>

	<batch:job id="importPersonnes"
		xmlns="http://www.springframework.org/schema/batch">
		<step id="readWritePersonne">
			<tasklet>
				<chunk reader="personneReaderCSV" writer="personDaoWriter"
					processor="personProcessor" commit-interval="1" />
			</tasklet>
		</step>
	</batch:job>

	<bean id="personneReaderCSV"
		class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource" value="personnes.txt" />
		<property name="lineMapper">
			<bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="delimiter" value="," />
						<property name="names"
							value="id,nom,prenom,civilite,taille" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="targetType"
							value="clean.code.tutorial.spring.batch.core.Person" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="personDaoWriter"
		class="clean.code.tutorial.spring.batch.writter.PersonWriter" />

	<bean id="personProcessor"
		class="clean.code.tutorial.spring.batch.processor.PersonProcessor" />

</beans>
